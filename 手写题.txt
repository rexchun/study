1.activity的启动模式
	stander :每新建一个activity就会把activity放入栈中
	singTop：当新建一个activiy是如果这个activity在栈顶就重复使用，如果不在就创建新的
	singTask:如果栈中有这个activity不需要重复创建，然后把该activity上面的都退出该栈
	singInstance:每个栈中只有一个acitivity
2:service的两种启动方式
	startService  onCreate  onStartCommand   onDestroy
	bindService   onCreate  onBind  onUnBind   onDestory
3.broadcast注册方式和区别
	第一种
	//new出上边定义好的BroadcastReceiver
MyBroadCastReceiver yBroadCastReceiver = new 		MyBroadCastReceiver();

//实例化过滤器并设置要过滤的广播  

		IntentFilter intentFilter = new IntentFilter		("android.provider.Telephony.SMS_RECEIVED");

//注册广播   
	
	myContext.registerReceiver(smsBroadCastReceiver,intentFilter, 
             			"android.permission.RECEIVE_SMS", null);
	第二种
	<receiver android:name=".MyBroadCastReceiver">  
            
	<!-- android:priority属性是设置此接收者的优先级（从-1000到1000） -->
          
  	<intent-filter android:priority="20">
            	<actionandroid:name="android.provider.Telephony.SMS_RECEIVED"/>  
            
	</intent-filter>  
</receiver>


	区别
	第一种动态广播随生命周期的销毁而销毁
	第二种是常驻型，当应该关闭后同样能接受到广播
4.http和https的区别
	两者都是超文本传输协议，而https是基于套接字层的传输协议，http请求网络时数据容易泄漏，
	https使用密钥和签字的证书响应连接，
	http作用在应用层，https作用在传输层
	http端口是80, https端口是4443
5.httpclient 和httpUrlConnection的区别
	defaultHttpClient和AndroidhttpClient是httpclient的具体实现类
	httppost=new httppost
	httppost.setpost
	HttpResponse=httpClient.excute(httppost)
	
	httpurlconnection.set信息
	httpurlconnection.getinputStream

	httpClient稳定,bug少，但是api数量多，不容易扩展,2.3前使用
	httpurlconnection  api简单，压缩和缓存机制减少了网络访问的流量。2.3后使用
6.mvp框架
	通过p层实现m和v的交互，p层将参数传到m层，获取到的数据以接口的方式从p层传到v层
7.java虚拟机、dalvik和art虚拟机的区别
	1,java虚拟机是基于栈的读取数据，而dalvik是通过寄存器读取，速度快，java虚拟机便宜的			是.class文件，dalivik是.dex文件
	2,dalvik每次启动应用是都有编译成机器码，而art环境下只在第一次安装时字节码预编译成
	机器码，这样以后启动就快了

8.Webview和js交互
	loadurl
	setjavaSciptenable
	setScrollBarStyle
	setWebChromClient();获取标题，进度等
	addjavascriptInterface();与js传输数据
	webview.evaluateJavascript（）android调用js方法
9.布局优化
	<include>重复使用布局
	<merge>去掉重复标签
	减少布局的层数

10.String，Stringbuffer，Stringbuilder 区别
	string每次修改时会重新创建一个对象
	stringbuffer,stringbuilder是对一个对象重复操作，但stringbuffer是线程安全的
11.recyclerview使用
	mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        mRecyclerView.setAdapter(mAdapter = new HomeAdapter());
	class HomeAdapter extends RecyclerView.Adapter<HomeAdapter.MyViewHolder>
	
	设置adapter
     	class HomeAdapter extends RecyclerView.Adapter<HomeAdapter.MyViewHolder>
    	{

        @Override
        public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType)
        {
            MyViewHolder holder = new MyViewHolder(LayoutInflater.from(
                    HomeActivity.this).inflate(R.layout.item_home, parent,
                    false));
            return holder;
        }

        @Override
        public void onBindViewHolder(MyViewHolder holder, int position)
        {
            holder.tv.setText(mDatas.get(position));
        }

        @Override
        public int getItemCount()
        {
            return mDatas.size();
        }

        class MyViewHolder extends ViewHolder
        {

            TextView tv;

            public MyViewHolder(View view)
            {
                super(view);
                tv = (TextView) view.findViewById(R.id.id_num);
            }
        }
    }

12.recycerview加header和多布局
	//根据position返回不同的type
	public int getItemViewType(int position) {

	}

	//根据不同的viewtype创建不同的布局
 	@Override
    	public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {

        	return view
    	}
13.RecyclerView添加分割线
	mRecyclerView.addItemDecoration
13.解决ScrollView嵌套ListView和GridView冲突的方法

	重写ListView的onMeasure方法，来自定义高度：

	@Override
    	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        	int expandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE >> 2, 					MeasureSpec.AT_MOST);
        	super.onMeasure(widthMeasureSpec, expandSpec);
    	}

14.Message、Handler、MessageQueen、Looper的之间的关系
	使用handlder发送message时，将获取到looper，message会放到messagequeen中，looper不停的	从	messagequeen中	获取message对象，并将message发送给handler，回调handlermessage
15.Android应用程序启动过程
	1，launch通过bindler进程通讯，通知AcvitytyManagerService去开启一个acitivity
	2，ActivityManagerService通过bindler进程通信再去告诉laucher进入parused状态
	3，laucher收到消息后，ActivityManegerService再去创建一个新的进程，在进程中创建activitythread实例
	4，activitytread通过binder进程通讯将一个binder类型的数据传给
	activitymanagerservice信息数据交互
	5，activitymanagerservice通过bindler通知activitytread启动一个activity

16.activity的启动过程
	1.调用startActivty实际上最后还是调用了startActivityForResult 方法
	2.启动activity方法的还是Instrumentation类。Instrumentation#execStartActivity
	3.真正执行activity的启动过程的是ActivityManagerNative.getDefault().startActivity
	执行启动activity之后，有一个代码检查方法：checkStartActivityResult
	4.ActivityManagerService继承自ActivityManagerNative,ActivityManagerNative,继承自
	binder并实现了IActivityManager接口，所有又回到了ActivityManagerService的startActivity方法
	5.经过多次调用activity的启动回到了ApplicationThread的scheduleLauchActivity方法
	6.然后用handler.sendMessage发送消息启动acitivty,然后在performLaunchActivity方法中启动activity

17.ListView优化
	1.convertView重用，利用好 convertView 来重用 View，切忌每次 getView() 都新建。ListView 的核心	原理就是重用 View，如果重用 view 不改变宽高，重用View可以减少重新分配缓存造成的内存频繁分配/	回收;

	2.ViewHolder优化，使用ViewHolder的原因是findViewById方法耗时较大，如果控件个数过多，会严重影		响性能，而使用ViewHolder主要是为了可以省去这个时间。通过setTag，getTag直接获取View。
	3.
减少Item View的布局层级，这是所有layout都必须遵循的，布局层级过深会直接导致View的测量与绘制	浪费大量的时间。

	4.adapter中的getView方法尽量少使用逻辑
图片加载采用三级缓存，避免每次都要重新加载。

	5.尝试开启硬件加速来使ListView的滑动更加流畅。
18.recyclerview局部刷新，精确到哪个item刷新
	recyclerviewAdapter.notifyItemChange(position)
	//具体到某个控件
	1.在Adpter中使用onBindViewHoder(final RecyclerView.ViewHolder holder, final int position,List 					payloads)
	2.通过payloads参数,给不同的控件用不同的数字标识，
	3.mAdapter.notifyItemChange(position ,payload);
19.activity与service通信的三种方式
	1.当使用startService启动时，将数据放入Intent中，在service 的onStartCommand(Intent intent)中获取
	2.使用binderService启动，实现参数中的ServiceConnection,在Service 的onBind()返回自定义的Binder,
	  自定义的Binder编写获取service数据的方法，供activity中调用
	3.在方法二的基础上在自定义的Binder中返回this.service;在Activity中就可以使用返回的这个对象调用方法了

20.http 的增删改查

21.音视频的实现原理

22.Android中的内存泄漏和内存溢出有什么区别
	
23.Android中的显示Intent和隐试Intent的区别
	
24.Androi中序列化有那些，他们的区别
	Serializable:java中的序列化接口，使用起来开销大，序列化和反序列化需要大量I/O操作：
	Parcelable:是Android中的序列化方式，占用资源少，效率高。
25.用过哪些图片加载框架？看过源码吗？简述一下流程。

26.如何获取程序的崩溃日志
	1.自定义类实现UncaughtExceptionHandler接口
	2.重写uncaughtException方法
	3.在初始化时使用自定义的CrashCatchHandler替换掉系统默认的UncaughtException处理器
	4.在uncaughtException方法中获得错误信息，并将它存储到sd卡中
	5.自定义Application继承Application，在onCreate方法中初始化自定义的CrashCatchHandler
	6.更改AndroidManifest中Application的name字段为自定义的Application

27.png和jpg的区别
	1、png有透明通道,而jpg没有 
	2、png是无损压缩的,而jpg是有损压缩,因此png中存储的信息会很多,体积自然就大了
	3、同样一张背景图,png虽然体积大,但是加载速度更快
28.事件分发中的 onTouch 和 onTouchEvent 有什么区别，又该如何使用？
	1.onTouch 优先于 onTouchEvent执行。如果在 onTouch 方法中通过返回 true 将事件消费掉，onTouchEvent 将不会再执行
	2.onTouch 能够得到执行需要两个前提条件，第一 mOnTouchListener 的值不能为空，第二当前点击的控件必须是 enable 的
29.Android5、6、7的新特性
	Android5.0新特性：
	MaterialDesign设计风格
	支持多种设备
	支持64位ART虚拟机

	Android6.0新特性
	大量漂亮流畅的动画
	支持快速充电的切换
	支持文件夹拖拽应用
	相机新增专业模式

	Android7.0新特性
	分屏多任务
	增强的Java8语言模式
	夜间模式
30.activity和fragment传递数据
	1.fragment.setArguments(Bundle);
	2.在onAttach(Activity activity)中获取activity然后调用方法

31.
    //选择排序
    public void selectSort(int[] array) {
        int min;
        int tmp = 0;
        for (int i = 0; i < array.length; i++) {
            min = array[i];
            for (int j = i; j < array.length; j++) {
                if (array[j] < min) {
                    min = array[j];//最小值
                    tmp = array[i];
                    array[i] = min;
                    array[j] = tmp;
                }
            }
        }
    }
    //冒泡
    private void pubbleSort(int[] numbers) {
        int temp;//记录临时变量
        int size = numbers.length;//数组大小
        for (int i = 0; i < size - 1; i++) {
            for (int j = i + 1; j < size; j++) {//索引不同的两层for循环
                if (numbers[i] < numbers[j]) {//交互数据从大到小排列顺序  大的放前面
                    temp = numbers[i];
                    numbers[i] = numbers[j];
                    numbers[j] = temp;
                }
            }
        }
    }

31、讲解一下Context 
	Context是一个抽象基类。在翻译为上下文，也可以理解为环境，是提供一些程序的运行环境基础信息。
	Context下有两个子类，ContextWrapper是上下文功能的封装类，而ContextImpl则是上下文功能的实现类。
	而ContextWrapper又有三个直接的子类， ContextThemeWrapper、Service和Application。
	其中，ContextThemeWrapper是一个带主题的封装类，而它有一个直接子类就是Activity，
	所以Activity和Service以及Application的Context是不一样的，只有Activity需要主题，Service不需要主题。
	Context一共有三种类型，分别是Application、Activity和Service。这三个类虽然分别各种承担着不同的作用，但它们都属于Context的一种，
	而它们具体Context的功能则是由ContextImpl类去实现的，因此在绝大多数场景下，Activity、Service和Application这三种类型的Context都是可以通用的。
	不过有几种场景比较特殊，比如启动Activity，还有弹出Dialog。
	出于安全原因的考虑，Android是不允许Activity或Dialog凭空出现的，一个Activity的启动必须要建立在另一个Activity的基础之上，也就是以此形成的返回栈。
	而Dialog则必须在一个Activity上面弹出（除非是System Alert类型的Dialog），因此在这种场景下，我们只能使用Activity类型的Context，否则将会出错。
 
	getApplicationContext()和getApplication()方法得到的对象都是同一个application对象，只是对象的类型不一样。
	Context数量 = Activity数量 + Service数量 + 1 （1为Application）
32、理解Activity，View,Window三者关系
	这个问题真的很不好回答。所以这里先来个算是比较恰当的比喻来形容下它们的关系吧。
	Activity像一个工匠（控制单元），Window像窗户（承载模型），View像窗花（显示视图）LayoutInflater像剪刀，Xml配置像窗花图纸。
	Activity包含了一个PhoneWindow，而PhoneWindow就是继承于Window的，Activity通过setContentView将View设置到了PhoneWindow上，
	而View通过WindowManager的addView()、removeView()、updateViewLayout()对View进行管理



	1：Activity构造的时候会初始化一个Window，准确的说是PhoneWindow。
	2：这个PhoneWindow有一个“ViewRoot”，这个“ViewRoot”是一个View或者说ViewGroup，是最初始的根视图。
	3：“ViewRoot”通过addView方法来一个个的添加View。比如TextView，Button等
	4：这些View的事件监听，是由WindowManagerService来接受消息，并且回调Activity函数。比如onClickListener，onKeyDown等。

33、View的绘制流程
	自定义控件：
	1、组合控件。这种自定义控件不需要我们自己绘制，而是使用原生控件组合成的新控件。如标题栏。
	2、继承原有的控件。这种自定义控件在原生控件提供的方法外，可以自己添加一些方法。如制作圆角，圆形图片。
	3、完全自定义控件：这个View上所展现的内容全部都是我们自己绘制出来的。比如说制作水波纹进度条。
 
	View的绘制流程：OnMeasure()――>OnLayout()――>OnDraw()
 
	第一步：OnMeasure()：测量视图大小。从顶层父View到子View递归调用measure方法，measure方法又回调OnMeasure。
	第二步：OnLayout()：确定View位置，进行页面布局。从顶层父View向子View的递归调用view.layout方法的过程，即父View根据上一步measure子View所得到的布局大小和布局参数，将子View放在合适的位置上。
	第三步：OnDraw()：绘制视图。ViewRoot创建一个Canvas对象，然后调用OnDraw()。六个步骤：①、绘制视图的背景；②、保存画布的图层（Layer）；③、绘制View的内容；④、绘制View子视图，如果没有就不用；
	⑤、还原图层（Layer）；⑥、绘制滚动条。
34.Binde机制简单理解:
	在Android系统的Binder机制中，是有Client,Service,ServiceManager,Binder驱动程序组成的，其中Client，service，Service Manager运行在用户空间，Binder驱动程序是运行在内核空间的。而Binder就是把这4种组件粘合在一块的粘合剂，其中核心的组件就是Binder驱动程序，Service Manager提供辅助管理的功能，而Client和Service正是在Binder驱动程序和Service Manager提供的基础设施上实现C/S 之间的通信。其中Binder驱动程序提供设备文件/dev/binder与用户控件进行交互，
	Client、Service，Service Manager通过open和ioctl文件操作相应的方法与Binder驱动程序进行通信。而Client和Service之间的进程间通信是通过Binder驱动程序间接实现的。而Binder Manager是一个守护进程，用来管理Service，并向Client提供查询Service接口的能力。
35、ANR
	ANR全名Application Not Responding, 也就是"应用无响应". 当操作在一段时间内系统无法处理时, 系统层面会弹出上图那样的ANR对话框.
	产生原因：
	(1)5s内无法响应用户输入事件(例如键盘输入, 触摸屏幕等).
	(2)BroadcastReceiver在10s内无法结束
	(3)Service 20s内无法结束（低概率）
36、RecyclerView和ListView的区别
	RecyclerView可以完成ListView,GridView的效果，还可以完成瀑布流的效果。同时还可以设置列表的滚动方向（垂直或者水平）；
	RecyclerView中view的复用不需要开发者自己写代码，系统已经帮封装完成了。
	RecyclerView可以进行局部刷新。
	RecyclerView提供了API来实现item的动画效果。
	在性能上：
	如果需要频繁的刷新数据，需要添加动画，则RecyclerView有较大的优势。
	如果只是作为列表展示，则两者区别并不是很大。
37、HTTP链接的特点
HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。
从建立连接到关闭连接的过程称为“一次连接”。
 
38、TCP和UDP的区别
	tcp是面向连接的，由于tcp连接需要三次握手，所以能够最低限度的降低风险，保证连接的可靠性。
	udp 不是面向连接的，udp建立连接前不需要与对象建立连接，无论是发送还是接收，都没有发送确认信号。所以说udp是不可靠的。
	由于udp不需要进行确认连接，使得UDP的开销更小，传输速率更高，所以实时行更好。
39.数据库优化
	在平时的开发中，其实我们每次给数据库中插入一条数据，数据库都会单独开启一个事务，我们插入多少条数据， 
	就会对磁盘由多少次操作。这样在数据比较多的情况下，大大的降低了数据库的操作效率
	批量插入数据时启动事务，批量插入，减少事务次数，从而提升性能

RxJava
热修复
数据结构






